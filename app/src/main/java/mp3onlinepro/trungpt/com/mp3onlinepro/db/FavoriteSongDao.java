package mp3onlinepro.trungpt.com.mp3onlinepro.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_SONG".
*/
public class FavoriteSongDao extends AbstractDao<FavoriteSong, Long> {

    public static final String TABLENAME = "FAVORITE_SONG";

    /**
     * Properties of entity FavoriteSong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property UrlSource = new Property(2, String.class, "urlSource", false, "URL_SOURCE");
        public final static Property UrlThumbnail = new Property(3, String.class, "urlThumbnail", false, "URL_THUMBNAIL");
        public final static Property UrlDownload = new Property(4, String.class, "urlDownload", false, "URL_DOWNLOAD");
        public final static Property Artist = new Property(5, String.class, "artist", false, "ARTIST");
        public final static Property Duration = new Property(6, Long.class, "duration", false, "DURATION");
    };


    public FavoriteSongDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteSongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"URL_SOURCE\" TEXT," + // 2: urlSource
                "\"URL_THUMBNAIL\" TEXT," + // 3: urlThumbnail
                "\"URL_DOWNLOAD\" TEXT," + // 4: urlDownload
                "\"ARTIST\" TEXT," + // 5: artist
                "\"DURATION\" INTEGER);"); // 6: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoriteSong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String urlSource = entity.getUrlSource();
        if (urlSource != null) {
            stmt.bindString(3, urlSource);
        }
 
        String urlThumbnail = entity.getUrlThumbnail();
        if (urlThumbnail != null) {
            stmt.bindString(4, urlThumbnail);
        }
 
        String urlDownload = entity.getUrlDownload();
        if (urlDownload != null) {
            stmt.bindString(5, urlDownload);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(6, artist);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoriteSong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String urlSource = entity.getUrlSource();
        if (urlSource != null) {
            stmt.bindString(3, urlSource);
        }
 
        String urlThumbnail = entity.getUrlThumbnail();
        if (urlThumbnail != null) {
            stmt.bindString(4, urlThumbnail);
        }
 
        String urlDownload = entity.getUrlDownload();
        if (urlDownload != null) {
            stmt.bindString(5, urlDownload);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(6, artist);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FavoriteSong readEntity(Cursor cursor, int offset) {
        FavoriteSong entity = new FavoriteSong( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // urlSource
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urlThumbnail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // urlDownload
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // artist
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoriteSong entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrlSource(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrlThumbnail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrlDownload(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArtist(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FavoriteSong entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FavoriteSong entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
